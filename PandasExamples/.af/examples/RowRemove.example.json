{
    "RowRemove": [
        {
            "KitText": "#> RowRemove --missing --exampleTitle Remove Rows with Empty Cells --example Data is often not clean and there might be rows within a dataframe that are missing values from one or more columns. To simply remove all rows with missing cells, use the RowRemove kit with the missing option.",
            "CodeAfterKit": "\npizzeriasDf = pizzeriasDf.dropna().reset_index(drop=True)",
            "ExampleDescription": "Data is often not clean and there might be rows within a dataframe that are missing values from one or more columns. To simply remove all rows with missing cells, use the RowRemove kit with the missing option.",
            "ExampleTitle": "Remove Rows with Empty Cells"
        },
        {
            "KitText": "#> RowRemove --missing --columns Rating Established Year --exampleTitle Remove Rows with Missing Cells in Specified Columns --example Rather than removing rows with any missing cells, sometimes we only want to clean up a dataframe that is missing values in specific columns. In this example, we only remove rows that have missing values in the Rating or Established Year columns.",
            "CodeAfterKit": "\npizzeriasDf = pizzeriasDf.dropna(subset = ['Rating', 'Established Year']).reset_index(drop=True)",
            "ExampleDescription": "Rather than removing rows with any missing cells, sometimes we only want to clean up a dataframe that is missing values in specific columns. In this example, we only remove rows that have missing values in the Rating or Established Year columns.",
            "ExampleTitle": "Remove Rows with Missing Cells in Specified Columns"
        },
        {
            "KitText": "#> RowRemove --indexStart 3 --exampleTitle Remove All Rows Starting At an Index --example Rather than remove a single row from the dataframe, sometimes you want to remove many, many more rows. Using the indexStart option, without the indexStop option, will remove the row at the specified index and all rows after it. In this example, the row at index 3 through the end of the dataframe are removed.",
            "CodeAfterKit": "\npizzeriasDf = pizzeriasDf.drop(pizzeriasDf.index[3:])",
            "ExampleDescription": "Rather than remove a single row from the dataframe, sometimes you want to remove many, many more rows. Using the indexStart option, without the indexStop option, will remove the row at the specified index and all rows after it. In this example, the row at index 3 through the end of the dataframe are removed.",
            "ExampleTitle": "Remove All Rows Starting At an Index"
        },
        {
            "KitText": "#> RowRemove --indexStop 50 --exampleTitle Remove All Rows Up To an Index --example The previous example removed rows at and after an index. This time, we remove all rows starting at the first row up to, and including, the specified row index. In this example, we rows from the start of the dataframe up to and including the row at index 50. This is done when you use the indexStop option without the indexStart option.",
            "CodeAfterKit": "\npizzeriasDf = pizzeriasDf.drop(pizzeriasDf.index[:50+1]).reset_index(drop=True)",
            "ExampleDescription": "The previous example removed rows at and after an index. This time, we remove all rows starting at the first row up to, and including, the specified row index. In this example, we rows from the start of the dataframe up to and including the row at index 50. This is done when you use the indexStop option without the indexStart option.",
            "ExampleTitle": "Remove All Rows Up To an Index"
        },
        {
            "KitText": "#> RowRemove --indexStart 5 --indexStop 10 --exampleTitle Remove All Rows Starting at an Index to a Second Index --example Combining the previous two examples, this time we use both the indexStart and indexStop options. This will remove only rows from the row at the indexStart index to the indexStop index. It will be inclusive of both indexes. Therefore, this example will remove rows from and including the row at index 5 to the row at index 10.",
            "CodeAfterKit": "\npizzeriasDf = pizzeriasDf.drop(pizzeriasDf.index[5:10+1]).reset_index(drop=True)",
            "ExampleDescription": "Combining the previous two examples, this time we use both the indexStart and indexStop options. This will remove only rows from the row at the indexStart index to the indexStop index. It will be inclusive of both indexes. Therefore, this example will remove rows from and including the row at index 5 to the row at index 10.",
            "ExampleTitle": "Remove All Rows Starting at an Index to a Second Index"
        },
        {
            "KitText": "#> RowRemove --where Pizzeria Name contains Antonio --exampleTitle Remove Rows That Match a Criteria --example Rather than specifying certain rows indexes, or rows with missing data, other times you want to remove rows that fit into a specified criteria. In this example, we remove all rows where the Pizzeria Name contains the word Antonio.",
            "CodeAfterKit": "\npizzeriasDf = pizzeriasDf[~(pizzeriasDf['Pizzeria Name'].astype('str').str.contains('Antonio').fillna(False))].reset_index(drop=True)",
            "ExampleDescription": "Rather than specifying certain rows indexes, or rows with missing data, other times you want to remove rows that fit into a specified criteria. In this example, we remove all rows where the Pizzeria Name contains the word Antonio.",
            "ExampleTitle": "Remove Rows That Match a Criteria"
        }
    ]
}