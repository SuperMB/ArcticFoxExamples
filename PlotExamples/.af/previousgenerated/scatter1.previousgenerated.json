{
    "0000": [
        {
            "PreviouslyGenerated": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator ",
            "Existing": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator "
        },
        {
            "PreviouslyGenerated": "import pandas as pd\nimport numpy as np ",
            "Existing": "import pandas as pd\nimport numpy as np "
        },
        {
            "PreviouslyGenerated": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt ",
            "Existing": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt "
        },
        {
            "PreviouslyGenerated": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates ",
            "Existing": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates "
        }
    ],
    "013905903476061057": [
        {
            "PreviouslyGenerated": "appleStockDf = pd.read_csv('AppleStock.csv')\nappleStockDf['Date'] = pd.to_datetime(appleStockDf['Date']) ",
            "Existing": "appleStockDf = pd.read_csv('AppleStock.csv')\nappleStockDf['Date'] = pd.to_datetime(appleStockDf['Date']) "
        },
        {
            "PreviouslyGenerated": "nBADf = pd.read_csv('NBA.csv') ",
            "Existing": "nBADf = pd.read_csv('NBA.csv') "
        }
    ],
    "243905810293981057": [
        {
            "PreviouslyGenerated": "pd.set_option('display.width', 10000)\npd.set_option('display.max_columns', None) ",
            "Existing": "pd.set_option('display.width', 10000)\npd.set_option('display.max_columns', None) "
        }
    ],
    "013905810293981057": [
        {
            "PreviouslyGenerated": "print(appleStockDf.head()) #)1 ",
            "Existing": "print(appleStockDf.head()) #)1 "
        },
        {
            "PreviouslyGenerated": "print(nBADf.head()) #)1 ",
            "Existing": "print(nBADf.head()) #)1 "
        }
    ],
    "013905200824371057": [
        {
            "PreviouslyGenerated": "#***Scatter: Creates a scatter plot that can be 2 or 3 dimensions. Can also use --group or --where conditions.\n#***\n#***What type of data would you like to plot on the x-axis?\n#***- Categorical #> `select ? --x ? --xCategorical --af a1\n#***- Date #> `select ? --x ? --af a2\n#***- Numeric #> `select ? --x ? --af a3\n#***- Row Index #> `select ? --af a4 --index",
            "Existing": "#***Scatter: Creates a scatter plot that can be 2 or 3 dimensions. Can also use --group or --where conditions.\n#***\n#***What type of data would you like to plot on the x-axis?\n#***- Categorical #> `select ? --x ? --xCategorical --af a1\n#***- Date #> `select ? --x ? --af a2\n#***- Numeric #> `select ? --x ? --af a3\n#***- Row Index #> `select ? --af a4 --index"
        },
        {
            "PreviouslyGenerated": "appleStockDf['Date'] = pd.to_datetime(appleStockDf['Date'])\n\nplt.scatter(appleStockDf['Date'], appleStockDf['High'], color=colorCycle[colorCycleIndex], label='High')\n\nplt.title('High vs Date', fontsize=14, fontweight='bold')\nplt.xlabel('Date', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('High', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "appleStockDf['Date'] = pd.to_datetime(appleStockDf['Date'])\n\nplt.scatter(appleStockDf['Date'], appleStockDf['High'], color=colorCycle[colorCycleIndex], label='High')\n\nplt.title('High vs Date', fontsize=14, fontweight='bold')\nplt.xlabel('Date', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('High', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        },
        {
            "PreviouslyGenerated": "appleStockDf['Date'] = pd.to_datetime(appleStockDf['Date'])\n\nplt.scatter(appleStockDf['Date'], appleStockDf['High'], color=colorCycle[colorCycleIndex], label='High', s=appleStockDf['Volume'])\n\nplt.title('High vs Date', fontsize=14, fontweight='bold')\nplt.xlabel('Date', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('High', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "appleStockDf['Date'] = pd.to_datetime(appleStockDf['Date'])\n\nplt.scatter(appleStockDf['Date'], appleStockDf['High'], color=colorCycle[colorCycleIndex], label='High', s=appleStockDf['Volume'])\n\nplt.title('High vs Date', fontsize=14, fontweight='bold')\nplt.xlabel('Date', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('High', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        },
        {
            "PreviouslyGenerated": "appleStockDf['Date'] = pd.to_datetime(appleStockDf['Date'])\n\nplt.scatter(appleStockDf['Date'], appleStockDf['High'], color=colorCycle[colorCycleIndex], label='High', s=appleStockDf['VolumeScaled'])\n\nplt.title('High vs Date', fontsize=14, fontweight='bold')\nplt.xlabel('Date', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('High', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "appleStockDf['Date'] = pd.to_datetime(appleStockDf['Date'])\n\nplt.scatter(appleStockDf['Date'], appleStockDf['High'], color=colorCycle[colorCycleIndex], label='High', s=appleStockDf['VolumeScaled'])\n\nplt.title('High vs Date', fontsize=14, fontweight='bold')\nplt.xlabel('Date', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('High', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        },
        {
            "PreviouslyGenerated": "appleStockDf['Date'] = pd.to_datetime(appleStockDf['Date'])\n\nplt.scatter(appleStockDf['Date'], appleStockDf['High'], color=colorCycle[colorCycleIndex], label='High', s=appleStockDf['VolumeScaledTwice'])\n\nplt.title('High vs Date', fontsize=14, fontweight='bold')\nplt.xlabel('Date', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('High', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "appleStockDf['Date'] = pd.to_datetime(appleStockDf['Date'])\n\nplt.scatter(appleStockDf['Date'], appleStockDf['High'], color=colorCycle[colorCycleIndex], label='High', s=appleStockDf['VolumeScaledTwice'])\n\nplt.title('High vs Date', fontsize=14, fontweight='bold')\nplt.xlabel('Date', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('High', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        }
    ],
    "243905200824371057": [
        {
            "PreviouslyGenerated": "plt.style.use(\"darktheme.mplstyle\")\ncolorCycle = plt.rcParams['axes.prop_cycle'].by_key()['color'] ",
            "Existing": "plt.style.use(\"darktheme.mplstyle\")\ncolorCycle = plt.rcParams['axes.prop_cycle'].by_key()['color'] "
        }
    ],
    "043905200824371057": [
        {
            "PreviouslyGenerated": "colorCycleIndex = 0 ",
            "Existing": "colorCycleIndex = 0 "
        }
    ],
    "013905857290261057": [
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'] / 1000000 ",
            "Existing": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'] / 1000000 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'] / 100000000 ",
            "Existing": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'] / 100000000 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'] / 10000000 ",
            "Existing": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'] / 10000000 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 10000000 ",
            "Existing": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 10000000 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 1000 ",
            "Existing": "# User changes detected\nappleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 10000 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 100 ",
            "Existing": "# User changes detected\nappleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 10000  #~ appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 100 "
        }
    ],
    "013905235465221057": [
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 100 ",
            "Existing": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 100 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = ',.3'appleStockDf['Volume'].apply(math.pow) / 10000 ",
            "Existing": "appleStockDf['VolumeScaled'] = ',.3'appleStockDf['Volume'].apply(math.pow) / 10000 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.pow) / 10000 ",
            "Existing": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.pow) / 10000 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 10000 ",
            "Existing": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) / 10000 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) ",
            "Existing": "appleStockDf['VolumeScaled'] = appleStockDf['Volume'].apply(math.sqrt) "
        }
    ],
    "013905870557801057": [
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaledTwice'] = appleStockDf['VolumeScaled'].apply(math.sqrt) ",
            "Existing": "appleStockDf['VolumeScaledTwice'] = appleStockDf['VolumeScaled'].apply(math.sqrt) "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaledTwice'] = appleStockDf['VolumeScaled'].apply(math.sqrt) / 100 ",
            "Existing": "appleStockDf['VolumeScaledTwice'] = appleStockDf['VolumeScaled'].apply(math.sqrt) / 100 "
        },
        {
            "PreviouslyGenerated": "appleStockDf['VolumeScaledTwice'] = appleStockDf['VolumeScaled'].apply(math.sqrt) / 10 ",
            "Existing": "# User changes detected\nappleStockDf['VolumeScaledTwice'] = appleStockDf['VolumeScaled'].apply(math.sqrt) / 100 "
        }
    ],
    "013905621008521057": [
        {
            "PreviouslyGenerated": "nBADfRowCount = nBADf.shape[0]\nprint(nBADfRowCount) #)2 ",
            "Existing": "nBADfRowCount = nBADf.shape[0]\nprint(nBADfRowCount) #)2 "
        }
    ],
    "243905264382141057": [
        {
            "PreviouslyGenerated": "plt.style.use(\"darktheme.mplstyle\")\ncolorCycle = plt.rcParams['axes.prop_cycle'].by_key()['color'] ",
            "Existing": "plt.style.use(\"darktheme.mplstyle\")\ncolorCycle = plt.rcParams['axes.prop_cycle'].by_key()['color'] "
        }
    ],
    "043905264382141057": [
        {
            "PreviouslyGenerated": "colorCycleIndex = 0 ",
            "Existing": "colorCycleIndex = 0 "
        }
    ],
    "013905264382141057": [
        {
            "PreviouslyGenerated": "plt.scatter(nBADf['Age'], nBADf['Points'], color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs Age', fontsize=14, fontweight='bold')\nplt.xlabel('Age', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Points', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "plt.scatter(nBADf['Age'], nBADf['Points'], color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs Age', fontsize=14, fontweight='bold')\nplt.xlabel('Age', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Points', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        },
        {
            "PreviouslyGenerated": "plt.scatter(nBADf['FG_Percent'], nBADf['Points'], color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs FG_Percent', fontsize=14, fontweight='bold')\nplt.xlabel('FG_Percent', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Points', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "plt.scatter(nBADf['FG_Percent'], nBADf['Points'], color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs FG_Percent', fontsize=14, fontweight='bold')\nplt.xlabel('FG_Percent', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Points', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        }
    ],
    "013905875814651057": [
        {
            "PreviouslyGenerated": "plt.scatter(nBADf['Team'].astype('category').cat.codes, nBADf['Age'], color=colorCycle[colorCycleIndex], label='Age')\n\nplt.gca().set_xticklabels(nBADf['Team'].astype('category').cat.categories, rotation=45)\nplt.gca().set_xticks(range(len(nBADf['Team'].astype('category').cat.categories)))\n\nplt.title('Age vs Team', fontsize=14, fontweight='bold')\nplt.xlabel('Team', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Age', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "plt.scatter(nBADf['Team'].astype('category').cat.codes, nBADf['Age'], color=colorCycle[colorCycleIndex], label='Age')\n\nplt.gca().set_xticklabels(nBADf['Team'].astype('category').cat.categories, rotation=45)\nplt.gca().set_xticks(range(len(nBADf['Team'].astype('category').cat.categories)))\n\nplt.title('Age vs Team', fontsize=14, fontweight='bold')\nplt.xlabel('Team', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Age', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        }
    ],
    "013905358691611057": [
        {
            "PreviouslyGenerated": "indexForPlot = range(len(nBADf['Points']))\n\nplt.scatter(indexForPlot, nBADf['Points'], marker='o', color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs Index', fontsize=14, fontweight='bold')\nplt.xlabel('Index', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Points', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "indexForPlot = range(len(nBADf['Points']))\n\nplt.scatter(indexForPlot, nBADf['Points'], marker='o', color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs Index', fontsize=14, fontweight='bold')\nplt.xlabel('Index', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Points', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        }
    ],
    "013905319209991057": [
        {
            "PreviouslyGenerated": "plt.axes(projection='3d')\n\nplt.gca().scatter(nBADf['Wins'], nBADf['Losses'], nBADf['Points'], color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs Losses and Wins', fontsize=14, fontweight='bold')\nplt.xlabel('Wins', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Losses', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "plt.axes(projection='3d')\n\nplt.gca().scatter(nBADf['Wins'], nBADf['Losses'], nBADf['Points'], color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs Losses and Wins', fontsize=14, fontweight='bold')\nplt.xlabel('Wins', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Losses', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        }
    ],
    "013905928106581057": [
        {
            "PreviouslyGenerated": "plt.scatter(nBADf['Wins'], nBADf['BLK'], color=colorCycle[colorCycleIndex], label='BLK')\n\ncolorCycleIndex = (colorCycleIndex + 1) % len(colorCycle)\n\nplt.scatter(nBADf['Wins'], nBADf['AST'], color=colorCycle[colorCycleIndex], label='AST')\n\ncolorCycleIndex = (colorCycleIndex + 1) % len(colorCycle)\n\nplt.scatter(nBADf['Wins'], nBADf['FG_Percent'], color=colorCycle[colorCycleIndex], label='FG_Percent')\n\nplt.title('BLK, AST, and FG_Percent vs Wins', fontsize=14, fontweight='bold')\nplt.xlabel('Wins', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('BLK, AST, and FG_Percent', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "plt.scatter(nBADf['Wins'], nBADf['BLK'], color=colorCycle[colorCycleIndex], label='BLK')\n\ncolorCycleIndex = (colorCycleIndex + 1) % len(colorCycle)\n\nplt.scatter(nBADf['Wins'], nBADf['AST'], color=colorCycle[colorCycleIndex], label='AST')\n\ncolorCycleIndex = (colorCycleIndex + 1) % len(colorCycle)\n\nplt.scatter(nBADf['Wins'], nBADf['FG_Percent'], color=colorCycle[colorCycleIndex], label='FG_Percent')\n\nplt.title('BLK, AST, and FG_Percent vs Wins', fontsize=14, fontweight='bold')\nplt.xlabel('Wins', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('BLK, AST, and FG_Percent', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        }
    ],
    "013905280738351057": [
        {
            "PreviouslyGenerated": "plt.axes(projection='3d')\n\nplt.gca().scatter(nBADf['Wins'], nBADf['Losses'], nBADf['Points'], color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs Losses and Wins', fontsize=14, fontweight='bold')\nplt.xlabel('Wins', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Losses', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() ",
            "Existing": "plt.axes(projection='3d')\n\nplt.gca().scatter(nBADf['Wins'], nBADf['Losses'], nBADf['Points'], color=colorCycle[colorCycleIndex], label='Points')\n\nplt.title('Points vs Losses and Wins', fontsize=14, fontweight='bold')\nplt.xlabel('Wins', fontsize=12, fontweight='bold', color='gray')\nplt.ylabel('Losses', fontsize=12, fontweight='bold', color='gray')\nplt.legend()\nplt.grid(True, linestyle='--', linewidth=0.5)\nplt.tick_params(axis='both', which='major', labelsize=10)\nplt.show() "
        }
    ]
}